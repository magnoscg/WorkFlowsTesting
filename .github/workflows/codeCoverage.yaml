name: Test And Coverage Report

on:
  pull_request:
    branches: ["master"]

jobs:
  build_and_test:
    name: ${{ matrix.command }} on ï£¿ ${{ matrix.platform }} (xcode ${{ matrix.xcode }}, ${{ matrix.macos }})
    runs-on: ${{ matrix.macos }}
    strategy:
      fail-fast: false
      matrix:
        xcode: ["14.2"]
        macos: ["macos-latest"]
        project: ["workflows/workflows.xcodeproj"]
        scheme: ["workflows"]
        command: ["test"]
        platform: ["iOS"]
        workspace: ["workflows/workflows.xcodeproj/project.xcworkspace"]
        exclude:
          - macos: "macos-11"
            xcode: "12.0.1"
          - macos: "macos-10.15"
            xcode: "13.0"
          - macos: "macos-10.15"
            xcode: "12.5.1"
          - platform: "watchOS"
            xcode: "12.0.1"
    steps:
      - name: Switch xcode to ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1.2.3
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Double-check macOS version (${{ matrix.macos }})
        run: sw_vers
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: list files
        run: ls /Users/runner/work/WorkFlowsTesting/WorkFlowsTesting/workflows
      - name: Check xcodebuild version
        run: xcodebuild -version
      - name: Check xcode embedded SDKs
        run: xcodebuild -showsdks
      - name: Show buildable schemes
        run: xcodebuild -list
        working-directory: workflows
      - name: Show eligible build destinations for ${{ matrix.scheme }}
        run: xcodebuild -showdestinations -scheme ${{ matrix.scheme }}
        working-directory: workflows
      - name: Test
        run: |
          xcodebuild -project ${{ matrix.project }} -scheme ${{ matrix.scheme }} -resultBundlePath TestResults test
      - name: Generate report
        uses: kishikawakatsumi/xcresulttool@v1
        with:
          path: TestResults.xcresult
        if: success()

     #- name: Convert test results for codecov
     #   run: xcresultparser \ --output-format cobertura \ "artifacts/ResultBundle.xcresult" >"artifacts/coverage.xml"
        
    #  - name: Upload coverage reports to Codecov
    #    uses: codecov/codecov-action@v3
     #   env:
     #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
